@page "/newworkout"

@using AnywhereFit.Data
@using System.Timers

@inject NavigationManager Navigation
@inject ExerciseService ExerciseService

<PageTitle>New Workout</PageTitle>

<h1>New Workout</h1>

<p>Add some instructions here...</p>

<hr />

@if (workoutState == _workoutState.New)
{
    <div class="form-group">
        <label for="numExercises">Number of Exercises:</label>
        <select class="form-control" id="numExercises" @bind="_numExercises">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
            <option value="25">25</option>
        </select>
    </div>
    <br />
    <div class="form-group">
        <label for="workoutType">Workout Type:</label>
        <select class="form-control" id="workoutType" @bind="_workoutType">
            <option value="Upper Body">Upper Body</option>
            <option value="Lower Body">Lower Body</option>
            <option value="Full Body">Full Body</option>
            <option value="Cardio">Cardio</option>
        </select>
    </div>
    <br />
    <button type="submit" class="btn btn-primary" @onclick="CreateWorkout">Create Workout</button>
}
else if (workoutState == _workoutState.Created)
{
    @if (_exercises == null)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        @*TODO: Display the exercises for the workout in a table. *@

        <table class="table">
            <thead>
                <tr>
                    <th>Exercise</th>
                    <th>Body Part</th>
                    <th>Target Muscle</th>
                    <th>Demonstration</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ex in _exercises)
                {
                    <tr>
                        <td>@ex.Name</td>
                        <td>@ex.BodyPart</td>
                        <td>@ex.TargetMuscle</td>
                        <td><img src="@ex.GifUrl"></td>
                    </tr>
                }
            </tbody>
        </table>

        <p>Are you ready to get after it? (placeholder)</p>
        <button type="submit" class="btn btn-success" @onclick="StartWorkout">Start Workout</button>
    }

}
else if (workoutState == _workoutState.WorkingOut)
{
    @*TODO: Move exercise cards to separate Razor component. *@
    
    <div class="container-md text-center">
        <div class="row">
            <div class="col p-2">
                <div class="container-sm">
                    <div class="card" style="max-width:400px; min-width:200px;">
                        <img class="card-img-top border border-2" src="@_exercises[_currentExercise].GifUrl">
                        <div class="card-body">
                            <h4 class="card-title">@_exercises[_currentExercise].Name.ToUpper()</h4>
                            @if (_currentExercise < _exercises.Count() - 1)
                            {
                                <button type="submit" class="btn btn-warning p-2" @onclick="NextExercise">Next Exercise</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary p-2" @onclick="SaveWorkout">Finish Workout</button>
                            }
                            </div>
                        </div>
                    </div>
             </div>
            <div class="col p-2">
                <div class="container-sm">
                    <ExerciseTimer TimerLabel="Stopwatch" />
                </div>
            </div>
        </div>
    </div>

}
else if (workoutState == _workoutState.Finished)
{
    <p>You killed it! Great job! (placeholder)</p>
    <button type="submit" class="btn btn-primary" @onclick="SaveWorkout">Finish Workout</button>
}
else
{
    <p>Workout has been saved! (placeholder)</p>
    <button type="submit" class="btn btn-warning" @onclick="ExitWorkout">Exit</button>
}




@code {
    private List<Exercise>? _exercises;
    private Timer? _timer;
    private int _remainingTime { get; set; }
    private int _currentExercise = 0;
    private int _numExercises { get; set; } = 5;
    private string _workoutType { get; set; } = "Upper Body";
    private enum _workoutState { New, Created, WorkingOut, Finished, Save };

    _workoutState workoutState = _workoutState.New;

    private async Task CreateWorkout()
    {
        _exercises = await ExerciseService.GetExercisesByType(_workoutType, _numExercises);
        workoutState = _workoutState.Created;
    }

    private void StartWorkout()
    {
        workoutState = _workoutState.WorkingOut;
    }

    private void StartTimer(int timerLength)
    {
        // Clear out any timers if they exist
        if (_timer != null) _timer.Dispose();

        // Pick timer length for work or rest
        _timer = new Timer(timerLength);
        _timer.Elapsed += (sender, e) =>
        {
            _remainingTime--;
            if (_remainingTime == 0)
            {
                _timer.Stop();
                StateHasChanged();
            }
            else
            {
                StateHasChanged();
            }
        };
        _timer.AutoReset = true;
        _timer.Enabled = true;
        _timer.Start();
    }

    private void NextExercise()
    {
        _currentExercise++;
    }

    private void FinishWorkout()
    {
        workoutState = _workoutState.Finished;
    }

    private void SaveWorkout()
    {
        workoutState = _workoutState.Save;
    }

    private void ExitWorkout()
    {
        Navigation.NavigateTo("/");
    }
}
