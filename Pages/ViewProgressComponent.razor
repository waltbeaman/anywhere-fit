@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager
@inject ExerciseService ExerciseService
@inject IWorkoutLogStorage WorkoutLogStorage

@if (_completedExercises == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <h2>Completed Exercises (Last 90 Days)</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Exercise</th>
                <th>Body Part</th>
                <th>Target Muscle</th>
                <th>Reps</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ex in _completedExercises)
            {
                <tr>
                    <td>@ex.DateTime.ToString("d")</td>
                    <td>@ex.Name.ToUpper()</td>
                    <td>@ex.BodyPart.ToUpper()</td>
                    <td>@ex.TargetMuscle.ToUpper()</td>
                    <td>@ex.Reps.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}


@* Dummy data buttons for DEV ONLY. Remove before moving to production. *@
<div class="contianer">
    <div class="row mt-5">
        <div class="col text-center">
            <button type="button" class="btn btn-sm btn-outline-success" @onclick="AddDummyData">Create Dummy Data</button>
            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="DeleteDummyData">Delete Dummy Data</button>
        </div>
    </div>
</div>


@code {
    private List<Exercise>? _completedExercises;

    // Get current user ID to load correct workout history
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }
    private string _currentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await _authenticationStateTask).User;
        var currentUser = await UserManager.GetUserAsync(user);
        _currentUserId = currentUser.Id;

        _completedExercises = await WorkoutLogStorage.GetAllUserExercisesAsync(_currentUserId);

    }


    //The following methods are for DEV ONLY. Do not move to production.
    private async Task AddDummyData()
    {
        await WorkoutLogStorage.AddDummyDataAsync(_currentUserId);
        NavigationManager.NavigateTo("/viewprogress", forceLoad: true);
    }

    private async Task DeleteDummyData()
    {
        await WorkoutLogStorage.DeleteDummyDataAsync(_currentUserId);
        NavigationManager.NavigateTo("/viewprogress", forceLoad: true);
    }
}