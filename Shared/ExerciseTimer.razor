@using System.Timers

<div class="card" style="max-width:400px; min-width:200px;">
    <div class="card-body">
        <h5 class="card-title">@TimerLabel</h5>
        <p class="card-text">@(_isExercising ? "Exercise time" : "Rest time")</p>
        <h4>@_timeLeft seconds</h4>
        <button @onclick="StartExercise" class="btn btn-primary">Start Exercise</button>
        <button @onclick="StopTimer" class="btn btn-secondary">Stop</button>
    </div>
    <div class="progress" style="height: 1rem;">
        <div class="progress-bar @(_isExercising ? "bg-info" : "bg-success")" role="progressbar" style="width: @_progressPercentage%;" aria-valuenow="@_progressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
</div>

@code {
    [Parameter] public string TimerLabel { get; set; } = "Exercise Timer";
    private int _exerciseDuration = 60;
    private int _restDuration = 10;
    private int _timeLeft;
    private Timer _timer;
    private bool _isExercising = true;
    private double _progressPercentage;
    private int _completedCycles = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = false;
    }

    private void StartExercise()
    {
        _isExercising = true;
        _timeLeft = _exerciseDuration;
        _timer.Enabled = true;
    }

    private void StopTimer()
    {
        _timer.Enabled = false;
    }

    private async void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (_timeLeft > 0)
        {
            _timeLeft--;
        }
        else
        {
            _timer.Enabled = false;
            if (_completedCycles < 1)
            {
                _isExercising = !_isExercising;
                _timeLeft = _isExercising ? _exerciseDuration : _restDuration;
                _timer.Enabled = true;
            }
            _completedCycles++;
        }

        _progressPercentage = (1.0 - (double)_timeLeft / (_isExercising ? _exerciseDuration : _restDuration)) * 100;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
